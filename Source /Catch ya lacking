--[[
ScriptVerseHub - Premium Script Hub
Enhanced with Advanced Systems
]]

local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/master/source.lua", true))()

local Window = Luna:CreateWindow({
	Name = "ScriptVerseHub",
	Subtitle = "Premium Script Hub",
	LogoID = nil,
	LoadingEnabled = true,
	LoadingTitle = "ScriptVerseHub",
	LoadingSubtitle = "Loading Premium Features...",
	ConfigSettings = {
		RootFolder = nil,
		ConfigFolder = "ScriptVerseHub"
	},
	KeySystem = false,
	DiscordInvite = "https://discord.gg/xnn77nMGMv"
})

Window:CreateHomeTab({
	SupportedExecutors = {
		"Synapse X",
		"Krnl", 
		"Script-Ware",
		"Fluxus",
		"Electron",
		"Delta"
	},
	DiscordInvite = "https://discord.gg/xnn77nMGMv",
	Icon = 1
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PathfindingService = game:GetService("PathfindingService")

-- Create Tabs
local MainTab = Window:CreateTab({
	Name = "Main",
	Icon = "dashboard",
	ImageSource = "Material",
	ShowTitle = true
})

local LocalPlayerTab = Window:CreateTab({
	Name = "Local Player",
	Icon = "person",
	ImageSource = "Material",
	ShowTitle = true
})

local StealerTab = Window:CreateTab({
	Name = "Stealer",
	Icon = "security",
	ImageSource = "Material",
	ShowTitle = true
})

local MiscTab = Window:CreateTab({
	Name = "Miscellaneous",
	Icon = "widgets",
	ImageSource = "Material",
	ShowTitle = true
})

local ServerTab = Window:CreateTab({
	Name = "Server",
	Icon = "dns",
	ImageSource = "Material",
	ShowTitle = true
})

local SettingsTab = Window:CreateTab({
	Name = "Settings",
	Icon = "settings",
	ImageSource = "Material",
	ShowTitle = true
})

-- Character initialization
local character = LocalPlayer.Character
local hrp = character and character:FindFirstChild("HumanoidRootPart")
local humanoid = character and character:FindFirstChild("Humanoid")

if not character then
    character = LocalPlayer.CharacterAdded:Wait()
    hrp = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

LocalPlayer.CharacterAdded:Connect(function(c)
	character = c
    task.wait(0.5)
	hrp = character:WaitForChild("HumanoidRootPart")
	humanoid = character:WaitForChild("Humanoid")
end)

-- Enhanced Speed System (Using Grapple Hook Method)
local speedEnabled = false
local currentSpeed = 150
local speedConnection
local fakeFireLoop
local itemID = "Grapple Hook"
local useItemRE = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RE/UseItem")

local function updateCharacter()
    character = LocalPlayer.Character
    if character then
        humanoid = character:FindFirstChildOfClass("Humanoid")
        hrp = character:FindFirstChild("HumanoidRootPart")
    end
    return character and humanoid and hrp
end

local function buyGrapple()
    pcall(function()
        ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RF/CoinsShopService/RequestBuy"):InvokeServer(itemID)
    end)
end

local function autoEquip()
    pcall(function()
        local character = LocalPlayer.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        if not (character and humanoid and humanoid.Health>0) then return end
        local currentTool = character:FindFirstChildOfClass("Tool")
        if currentTool and currentTool.Name==itemID then return end
        local backpack = LocalPlayer:WaitForChild("Backpack")
        local grappleInBackpack = backpack:FindFirstChild(itemID)
        if grappleInBackpack then humanoid:EquipTool(grappleInBackpack) end
    end)
end

local function fakeFire()
    autoEquip()
    local args = {1.9832406361897787}
    pcall(function()
        useItemRE:FireServer(unpack(args))
    end)
end

local function startFakeFireLoop()
    if fakeFireLoop then fakeFireLoop:Disconnect() end
    fakeFireLoop = RunService.Heartbeat:Connect(function()
        if speedEnabled then fakeFire() end
    end)
end

local function startSpeedHack()
    if speedConnection then speedConnection:Disconnect() speedConnection = nil end
    if not speedEnabled or not humanoid or not hrp then return end
    
    speedConnection = RunService.Heartbeat:Connect(function()
        if not speedEnabled or not humanoid or not hrp then return end
        local dir = humanoid.MoveDirection.Magnitude > 0 and humanoid.MoveDirection.Unit or Vector3.new(0,0,0)
        hrp.AssemblyLinearVelocity = Vector3.new(dir.X * currentSpeed, hrp.AssemblyLinearVelocity.Y, dir.Z * currentSpeed)
    end)
end

local function stopSpeedHack()
    if speedConnection then 
        speedConnection:Disconnect() 
        speedConnection = nil
    end
    if fakeFireLoop then 
        fakeFireLoop:Disconnect() 
        fakeFireLoop = nil
    end
    if humanoid then 
        humanoid.WalkSpeed = 16 
    end
end

-- Enhanced Fly System
local flyEnabled = false
local flySpeed = 50
local flyConnection
local flyUp = false
local flyDown = false

local function startFlying()
    if flyConnection then flyConnection:Disconnect() flyConnection = nil end
    if not flyEnabled or not hrp then return end
    
    flyConnection = RunService.Heartbeat:Connect(function()
        if not flyEnabled or not hrp then return end
        
        local moveDirection = Vector3.new(0, 0, 0)
        
        if humanoid then
            moveDirection = humanoid.MoveDirection
        end
        
        if flyUp then
            moveDirection = moveDirection + Vector3.new(0, 1, 0)
        elseif flyDown then
            moveDirection = moveDirection + Vector3.new(0, -1, 0)
        end
        
        if moveDirection.Magnitude > 0 then
            moveDirection = moveDirection.Unit * flySpeed
        end
        
        hrp.AssemblyLinearVelocity = Vector3.new(moveDirection.X, moveDirection.Y, moveDirection.Z)
        hrp.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    end)
end

local function stopFlying()
    if flyConnection then 
        flyConnection:Disconnect() 
        flyConnection = nil 
    end
    if hrp then
        hrp.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
    end
end

-- Enhanced Swim System
local swimEnabled = false
local swimSpeed = 13
local swimConnection

local function startSwimming()
    if swimConnection then swimConnection:Disconnect() swimConnection = nil end
    if not swimEnabled or not hrp then return end
    
    swimConnection = RunService.Heartbeat:Connect(function()
        if not swimEnabled or not hrp then return end
        
        local moveDirection = Vector3.new(0, 0, 0)
        
        if humanoid then
            moveDirection = humanoid.MoveDirection
            humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        end
        
        if moveDirection.Magnitude > 0 then
            moveDirection = moveDirection.Unit * swimSpeed
        end
        
        hrp.AssemblyLinearVelocity = Vector3.new(moveDirection.X, moveDirection.Y, moveDirection.Z)
    end)
end

local function stopSwimming()
    if swimConnection then 
        swimConnection:Disconnect() 
        swimConnection = nil 
    end
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
    end
    if hrp then
        hrp.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
    end
end

-- Enhanced ESP System
local espConfig = {
    enabledBest = false,
    enabledSecret = false,
    enabledPlayer = false,
    enabledTracers = false,
    tracerThickness = 1,
    tracerColor = Color3.fromRGB(255, 0, 60)
}
local espBoxes = {}
local tracerConnections = {}

local function parseMoneyPerSec(text)
    if not text then return 0 end
    local mult = 1
    local numberStr = text:match('[%d%.]+')
    if not numberStr then return 0 end
    if text:find('K') then mult = 1_000
    elseif text:find('M') then mult = 1_000_000
    elseif text:find('B') then mult = 1_000_000_000
    elseif text:find('T') then mult = 1_000_000_000_000
    elseif text:find('Q') then mult = 1_000_000_000_000_000 end
    local number = tonumber(numberStr)
    return number and number * mult or 0
end

local ESP_FONT_NAME = Enum.Font.GothamSemibold
local ESP_RED_BRIGHT = Color3.fromRGB(255, 0, 60)
local ESP_GREEN = Color3.fromRGB(0, 240, 60)

local function clearAllBestSecret()
    local plotsFolder = Workspace:FindFirstChild('Plots')
    if not plotsFolder then return end
    for _, plot in ipairs(plotsFolder:GetChildren()) do
        for _, inst in ipairs(plot:GetDescendants()) do
            if inst:IsA('BillboardGui') and (inst.Name == 'Best_ESP' or inst.Name == 'Secret_ESP') then
                pcall(function() inst:Destroy() end)
            end
        end
    end
end

local function clearPlayerESP()
    for plr, objs in pairs(espBoxes) do
        if objs.box then pcall(function() objs.box:Destroy() end) end
        if objs.text then pcall(function() objs.text:Destroy() end) end
        if objs.tracer then pcall(function() objs.tracer:Destroy() end) end
    end
    espBoxes = {}
    
    for _, conn in pairs(tracerConnections) do
        conn:Disconnect()
    end
    tracerConnections = {}
end

local function updateTracers()
    if not espConfig.enabledTracers then return end
    
    local camera = Workspace.CurrentCamera
    if not camera then return end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local targetChar = player.Character
            local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
            if targetRoot then
                if not espBoxes[player] then
                    espBoxes[player] = {}
                end
                
                if not espBoxes[player].tracer then
                    local tracer = Drawing.new("Line")
                    tracer.Visible = false
                    tracer.Thickness = espConfig.tracerThickness
                    tracer.Color = espConfig.tracerColor
                    espBoxes[player].tracer = tracer
                    
                    local conn = RunService.RenderStepped:Connect(function()
                        if not espConfig.enabledTracers or not targetRoot or not hrp then
                            tracer.Visible = false
                            return
                        end
                        
                        local rootPos = hrp.Position
                        local targetPos = targetRoot.Position
                        
                        local rootScreenPos, rootVisible = camera:WorldToViewportPoint(rootPos)
                        local targetScreenPos, targetVisible = camera:WorldToViewportPoint(targetPos)
                        
                        if rootVisible and targetVisible then
                            tracer.From = Vector2.new(rootScreenPos.X, rootScreenPos.Y)
                            tracer.To = Vector2.new(targetScreenPos.X, targetScreenPos.Y)
                            tracer.Visible = true
                        else
                            tracer.Visible = false
                        end
                    end)
                    
                    table.insert(tracerConnections, conn)
                end
            end
        end
    end
end

local function updateBestSecret()
    local plotsFolder = Workspace:FindFirstChild('Plots')
    if not plotsFolder then
        clearAllBestSecret()
        return
    end
    if not (espConfig.enabledBest or espConfig.enabledSecret) then
        clearAllBestSecret()
        return
    end

    local myPlotName
    for _, plot in ipairs(plotsFolder:GetChildren()) do
        local plotSign = plot:FindFirstChild('PlotSign')
        if plotSign and plotSign:FindFirstChild('YourBase') and plotSign.YourBase.Enabled then
            myPlotName = plot.Name
            break
        end
    end

    local bestPetInfo
    for _, plot in ipairs(plotsFolder:GetChildren()) do
        if plot.Name ~= myPlotName then
            for _, desc in ipairs(plot:GetDescendants()) do
                if desc:IsA('TextLabel') and desc.Name == 'Rarity' and desc.Parent and desc.Parent:FindFirstChild('DisplayName') then
                    local parentModel = desc.Parent.Parent
                    local rarity = desc.Text
                    local displayName = desc.Parent.DisplayName.Text

                    if rarity == 'Secret' then
                        if espConfig.enabledSecret then
                            if not parentModel:FindFirstChild('Secret_ESP') then
                                local billboard = Instance.new('BillboardGui')
                                billboard.Name = 'Secret_ESP'
                                billboard.Size = UDim2.new(0, 198, 0, 60)
                                billboard.StudsOffset = Vector3.new(0, 3.3, 0)
                                billboard.AlwaysOnTop = true
                                billboard.Parent = parentModel
                                local label = Instance.new('TextLabel')
                                label.Text = displayName
                                label.Size = UDim2.new(1, 0, 1, 0)
                                label.BackgroundTransparency = 1
                                label.TextScaled = true
                                label.Font = ESP_FONT_NAME
                                label.TextColor3 = ESP_RED_BRIGHT
                                label.TextStrokeColor3 = Color3.new(0, 0, 0)
                                label.TextStrokeTransparency = 0.2
                                label.Parent = billboard
                            end
                        else
                            if parentModel:FindFirstChild('Secret_ESP') then
                                parentModel.Secret_ESP:Destroy()
                            end
                        end
                    end

                    if espConfig.enabledBest then
                        local genLabel = desc.Parent:FindFirstChild('Generation')
                        if genLabel and genLabel:IsA('TextLabel') then
                            local mps = parseMoneyPerSec(genLabel.Text)
                            if not bestPetInfo or mps > bestPetInfo.mps then
                                bestPetInfo = {
                                    petName = displayName,
                                    genText = genLabel.Text,
                                    mps = mps,
                                    model = parentModel,
                                }
                            end
                        end
                    end
                end
            end
        end
    end

    if espConfig.enabledBest then
        for _, plot in ipairs(plotsFolder:GetChildren()) do
            for _, inst in ipairs(plot:GetDescendants()) do
                if inst:IsA('BillboardGui') and inst.Name == 'Best_ESP' then
                    pcall(function() inst:Destroy() end)
                end
            end
        end
        if bestPetInfo and bestPetInfo.mps > 0 and bestPetInfo.model then
            local billboard = Instance.new('BillboardGui')
            billboard.Name = 'Best_ESP'
            billboard.Size = UDim2.new(0, 303, 0, 75)
            billboard.StudsOffset = Vector3.new(0, 4.84, 0)
            billboard.AlwaysOnTop = true
            billboard.Parent = bestPetInfo.model
            local nameLabel = Instance.new('TextLabel')
            nameLabel.Size = UDim2.new(1, 0, 0, 35)
            nameLabel.Position = UDim2.new(0, 0, 0, 0)
            nameLabel.BackgroundTransparency = 1
            nameLabel.Text = bestPetInfo.petName
            nameLabel.TextColor3 = ESP_RED_BRIGHT
            nameLabel.Font = ESP_FONT_NAME
            nameLabel.TextSize = 25
            nameLabel.TextStrokeTransparency = 0.07
            nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
            nameLabel.Parent = billboard
            local moneyLabel = Instance.new('TextLabel')
            moneyLabel.Size = UDim2.new(1, 0, 0, 22)
            moneyLabel.Position = UDim2.new(0, 0, 0, 35)
            moneyLabel.BackgroundTransparency = 1
            moneyLabel.Text = bestPetInfo.genText
            moneyLabel.TextColor3 = ESP_GREEN
            moneyLabel.Font = ESP_FONT_NAME
            moneyLabel.TextSize = 22
            moneyLabel.TextStrokeTransparency = 0.17
            moneyLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
            moneyLabel.Parent = billboard
        end
    end
end

local function updatePlayerESP()
    if espConfig.enabledPlayer then
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild('HumanoidRootPart') then
                local hrp = plr.Character.HumanoidRootPart
                if not espBoxes[plr] then
                    espBoxes[plr] = {}
                    local box = Instance.new('BoxHandleAdornment')
                    box.Size = Vector3.new(4, 6, 4)
                    box.Adornee = hrp
                    box.AlwaysOnTop = true
                    box.ZIndex = 10
                    box.Transparency = 0.5
                    box.Color3 = Color3.fromRGB(250, 0, 60)
                    box.Parent = hrp
                    espBoxes[plr].box = box

                    local billboard = Instance.new('BillboardGui')
                    billboard.Adornee = hrp
                    billboard.Size = UDim2.new(0, 200, 0, 30)
                    billboard.StudsOffset = Vector3.new(0, 4, 0)
                    billboard.AlwaysOnTop = true
                    local label = Instance.new('TextLabel', billboard)
                    label.Size = UDim2.new(1, 0, 1, 0)
                    label.BackgroundTransparency = 1
                    label.TextColor3 = Color3.fromRGB(220, 0, 60)
                    label.TextStrokeTransparency = 0
                    label.Text = plr.Name
                    label.Font = Enum.Font.GothamBold
                    label.TextSize = 18
                    espBoxes[plr].text = billboard
                    billboard.Parent = hrp
                else
                    if espBoxes[plr].box then espBoxes[plr].box.Adornee = hrp end
                    if espBoxes[plr].text then espBoxes[plr].text.Adornee = hrp end
                end
            else
                if espBoxes[plr] then
                    if espBoxes[plr].box then pcall(function() espBoxes[plr].box:Destroy() end) end
                    if espBoxes[plr].text then pcall(function() espBoxes[plr].text:Destroy() end) end
                    espBoxes[plr] = nil
                end
            end
        end
    else
        clearPlayerESP()
    end
end

-- QUANTUM CLONER DESYNC SYSTEM (Core Only)
local antiHitActive = false
local clonerActive = false
local desyncActive = false
local cloneListenerConn
local antiHitRunning = false
local lockdownRunning = false
local lockdownConn = nil
local invHealthConns = {}
local desyncHighlights = {}

-- Helper Functions
local function safeDisconnectConn(conn)
    if conn and typeof(conn) == 'RBXScriptConnection' then
        pcall(function()
            conn:Disconnect()
        end)
    end
end

local function addDesyncHighlight(model)
    if not model or desyncHighlights[model] then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "DesyncHighlight"
    highlight.FillColor = Color3.fromRGB(0, 255, 100)
    highlight.OutlineColor = Color3.fromRGB(255, 50, 50)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Parent = model
    desyncHighlights[model] = highlight
end

local function removeDesyncHighlight(model)
    local hl = desyncHighlights[model]
    if hl then
        pcall(function() hl:Destroy() end)
        desyncHighlights[model] = nil
    end
end

-- Invulnerability System
local function makeInvulnerable(model)
    if not model or not model.Parent then return end
    
    local hum = model:FindFirstChildOfClass('Humanoid')
    if not hum then return end

    -- Set massive health
    local maxHealth = 1e9
    pcall(function()
        hum.MaxHealth = maxHealth
        hum.Health = maxHealth
    end)

    -- Health change protection
    if invHealthConns[model] then
        safeDisconnectConn(invHealthConns[model])
        invHealthConns[model] = nil
    end
    
    invHealthConns[model] = hum.HealthChanged:Connect(function()
        pcall(function()
            if hum.Health < hum.MaxHealth then
                hum.Health = hum.MaxHealth
            end
        end)
    end)

    -- Add force field
    if not model:FindFirstChildOfClass('ForceField') then
        local ff = Instance.new('ForceField')
        ff.Visible = false
        ff.Parent = model
    end

    -- Add visual indicator
    addDesyncHighlight(model)

    -- Disable death states
    pcall(function()
        hum:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    end)
end

local function removeInvulnerable(model)
    if not model then return end
    
    -- Remove health connection
    if invHealthConns[model] then
        safeDisconnectConn(invHealthConns[model])
        invHealthConns[model] = nil
    end

    -- Remove force fields
    for _, ff in ipairs(model:GetChildren()) do
        if ff:IsA('ForceField') then
            pcall(function() ff:Destroy() end)
        end
    end

    -- Remove highlight
    removeDesyncHighlight(model)

    -- Restore humanoid states
    local hum = model:FindFirstChildOfClass('Humanoid')
    if hum then
        pcall(function()
            hum:SetStateEnabled(Enum.HumanoidStateType.Dead, true)
            hum:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
            local safeMax = 100
            hum.MaxHealth = safeMax
            if hum.Health > safeMax then
                hum.Health = safeMax
            end
        end)
    end
end

-- Desync Flag System
local function trySetFlag()
    pcall(function()
        if setfflag then
            setfflag('WorldStepMax', '-99999999999999')
        end
    end)
end

local function resetFlag()
    pcall(function()
        if setfflag then
            setfflag('WorldStepMax', '1')
        end
    end)
end

local function activateDesync()
    if desyncActive then return end
    desyncActive = true
    trySetFlag()
end

local function deactivateDesync()
    if not desyncActive then return end
    desyncActive = false
    resetFlag()
end

-- Lockdown System
local function performDesyncLockdown(duration, onComplete)
    if lockdownRunning then
        if onComplete then pcall(onComplete) end
        return
    end
    lockdownRunning = true

    local char = LocalPlayer.Character
    if not char then
        lockdownRunning = false
        if onComplete then pcall(onComplete) end
        return
    end

    local hrp = char:FindFirstChild('HumanoidRootPart')
    local hum = char:FindFirstChildOfClass('Humanoid')
    if not hrp or not hum then
        lockdownRunning = false
        if onComplete then pcall(onComplete) end
        return
    end

    -- Save original values
    local savedWalk = hum.WalkSpeed
    local savedJump = hum.JumpPower
    local savedUseJumpPower = hum.UseJumpPower

    -- Lock character in place
    hum.WalkSpeed = 0
    hum.JumpPower = 0
    hum.UseJumpPower = true
    hum.PlatformStand = true

    local fixedCFrame = hrp.CFrame

    -- Maintain position
    if lockdownConn then
        lockdownConn:Disconnect()
    end

    local lastCFrameTime = 0
    local CFRAME_UPDATE_INTERVAL = 0.15
    lockdownConn = RunService.Heartbeat:Connect(function()
        if not hrp or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
            return
        end
        local now = tick()
        pcall(function()
            hrp.Velocity = Vector3.new(0, 0, 0)
            hrp.RotVelocity = Vector3.new(0, 0, 0)
            if (now - lastCFrameTime) >= CFRAME_UPDATE_INTERVAL then
                hrp.CFrame = fixedCFrame
                lastCFrameTime = now
            end
        end)
    end)

    -- Wait for duration and cleanup
    task.delay(duration, function()
        if lockdownConn then
            lockdownConn:Disconnect()
            lockdownConn = nil
        end

        if hum and hum.Parent then
            pcall(function()
                hum.WalkSpeed = savedWalk or 16
                hum.JumpPower = savedJump or 50
                hum.UseJumpPower = savedUseJumpPower or true
                hum.PlatformStand = false
            end)
        end

        lockdownRunning = false
        if onComplete then
            pcall(onComplete)
        end
    end)
end

-- Quantum Cloner Core
local function activateClonerDesync(callback)
    if clonerActive then
        if callback then callback() end
        return
    end
    clonerActive = true

    -- Equip Quantum Cloner
    local Backpack = LocalPlayer:FindFirstChildOfClass('Backpack')
    local function equipQuantumCloner()
        if not Backpack then return end
        local tool = Backpack:FindFirstChild('Quantum Cloner')
        if tool then
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
            if humanoid then
                humanoid:EquipTool(tool)
            end
        end
    end
    equipQuantumCloner()

    -- Fire clone creation events
    local REUseItem = ReplicatedStorage.Packages.Net:FindFirstChild('RE/UseItem')
    if REUseItem then
        REUseItem:FireServer()
    end
    
    local REQuantumClonerOnTeleport = ReplicatedStorage.Packages.Net:FindFirstChild('RE/QuantumCloner/OnTeleport')
    if REQuantumClonerOnTeleport then
        REQuantumClonerOnTeleport:FireServer()
    end

    -- Wait for clone creation
    local cloneName = tostring(LocalPlayer.UserId) .. '_Clone'
    cloneListenerConn = Workspace.ChildAdded:Connect(function(obj)
        if obj.Name == cloneName and obj:IsA('Model') then
            -- Make both original and clone invulnerable
            pcall(function() makeInvulnerable(obj) end)
            local origChar = LocalPlayer.Character
            if origChar then
                pcall(function() makeInvulnerable(origChar) end)
            end
            
            -- Clean up listener
            if cloneListenerConn then
                cloneListenerConn:Disconnect()
                cloneListenerConn = nil
            end

            -- Perform lockdown animation
            performDesyncLockdown(1.6, function()
                if callback then pcall(callback) end
            end)
        end
    end)
end

local function deactivateClonerDesync()
    if not clonerActive then
        local existingClone = Workspace:FindFirstChild(tostring(LocalPlayer.UserId) .. '_Clone')
        if existingClone then
            pcall(function()
                removeInvulnerable(existingClone)
                existingClone:Destroy()
            end)
        end
        clonerActive = false
        return
    end

    clonerActive = false

    local char = LocalPlayer.Character
    if char then
        removeInvulnerable(char)
    end
    
    local clone = Workspace:FindFirstChild(tostring(LocalPlayer.UserId) .. '_Clone')
    if clone then
        removeInvulnerable(clone)
        pcall(function()
            clone:Destroy()
        end)
    end

    if cloneListenerConn then
        cloneListenerConn:Disconnect()
        cloneListenerConn = nil
    end
end

-- Main Desync Functions
local function executeAntiHit()
    if antiHitRunning then return end
    antiHitRunning = true

    activateDesync()
    task.wait(0.1)
    activateClonerDesync(function()
        deactivateDesync()
        antiHitRunning = false
        antiHitActive = true
    end)
end

local function deactivateAntiHit()
    if antiHitRunning then
        if cloneListenerConn then
            cloneListenerConn:Disconnect()
            cloneListenerConn = nil
        end
        antiHitRunning = false
    end

    deactivateClonerDesync()
    deactivateDesync()
    antiHitActive = false

    if LocalPlayer.Character then
        removeInvulnerable(LocalPlayer.Character)
    end

    local possibleClone = Workspace:FindFirstChild(tostring(LocalPlayer.UserId) .. '_Clone')
    if possibleClone then
        pcall(function()
            removeInvulnerable(possibleClone)
            possibleClone:Destroy()
        end)
    end

    for model, _ in pairs(desyncHighlights) do
        removeDesyncHighlight(model)
    end
end

-- Character Event Handlers
local function onCharacterAdded(character)
    task.delay(0.3, function()
        local clone = Workspace:FindFirstChild(tostring(LocalPlayer.UserId) .. '_Clone')
        if clone then
            pcall(function()
                removeInvulnerable(clone)
                clone:Destroy()
            end)
        end
    end)
end

local function onCharacterRemoving(ch)
    pcall(function()
        removeInvulnerable(ch)
    end)
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
LocalPlayer.CharacterRemoving:Connect(onCharacterRemoving)

-- AIMBOT SYSTEM (Web Slinger)
local WEBSLINGER_NAME = 'Web Slinger'
local autoAimbot = false
local aimbotConnection
local aimbotRange = 100
local aimbotInterval = 1

local function getClosestPlayerWithLowerTorso()
    local myChar = LocalPlayer.Character
    local myHRP = myChar and myChar:FindFirstChild('HumanoidRootPart')
    if not myHRP then
        return nil
    end
    
    local closest, closestDist = nil, math.huge
    
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild('LowerTorso') then
            local lt = plr.Character.LowerTorso
            local dist = (lt.Position - myHRP.Position).Magnitude
            if dist < closestDist then
                closest, closestDist = plr, dist
            end
        end
    end
    
    return closest
end

local function fireWebSlingerWithRange(maxRange)
    maxRange = maxRange or aimbotRange
    
    local myChar = LocalPlayer.Character
    local myHRP = myChar and myChar:FindFirstChild('HumanoidRootPart')
    if not myHRP then
        return false
    end
    
    local bp = LocalPlayer:FindFirstChildOfClass('Backpack')
    if bp and bp:FindFirstChild(WEBSLINGER_NAME) then
        LocalPlayer.Character.Humanoid:EquipTool(bp[WEBSLINGER_NAME])
    end
    
    if not LocalPlayer.Character:FindFirstChild(WEBSLINGER_NAME) then
        return false
    end
    
    local remoteEvent = ReplicatedStorage:FindFirstChild('Packages')
        and ReplicatedStorage.Packages:FindFirstChild('Net')
        and ReplicatedStorage.Packages.Net:FindFirstChild('RE/UseItem')
    
    if not remoteEvent then
        return false
    end
    
    local closest, closestDist = nil, math.huge
    
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild('LowerTorso') then
            local lt = plr.Character.LowerTorso
            local dist = (lt.Position - myHRP.Position).Magnitude
            if dist < closestDist and dist <= maxRange then
                closest, closestDist = plr, dist
            end
        end
    end
    
    if closest and closest.Character and closest.Character:FindFirstChild('LowerTorso') then
        local lt = closest.Character.LowerTorso
        remoteEvent:FireServer(lt.Position, lt)
        return true, closest.Name, closestDist
    end
    
    return false
end

local function startAutoAimbot()
    if autoAimbot then return end
    
    autoAimbot = true
    
    aimbotConnection = RunService.Heartbeat:Connect(function()
        if not autoAimbot then return end
        
        fireWebSlingerWithRange(aimbotRange)
        
        task.wait(aimbotInterval)
    end)
end

local function stopAutoAimbot()
    autoAimbot = false
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end
end

-- Enhanced Tween System
local Y_OFFSET = 9
local STOP_DISTANCE = 5
local currentTween
local tweenActive = false
local walkThread
local tweenSpeed = 18
local tweenMethod = "Normal"

local function getBasePosition()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return nil end
    for _, plot in ipairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        local base = plot:FindFirstChild("DeliveryHitbox")
        if sign and sign:FindFirstChild("YourBase") and sign.YourBase.Enabled and base then
            return base.Position
        end
    end
    return nil
end

local function isAtBase(basePos)
    if not basePos then return false end
    local dist = (hrp.Position - basePos).Magnitude
    return dist <= STOP_DISTANCE
end

local function tweenWalkTo(position)
    if currentTween then currentTween:Cancel() end

    local startPos = hrp.Position
    local targetPos = Vector3.new(position.X, position.Y + Y_OFFSET, position.Z)
    local distance = (targetPos - startPos).Magnitude
    local duration = distance / tweenSpeed
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)

    if tweenMethod == "Swim" then
        humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        hrp.AssemblyLinearVelocity = (targetPos - startPos).Unit * tweenSpeed
        task.wait(duration)
        hrp.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
    elseif tweenMethod == "Teleport to Sky" then
        local skyPos = Vector3.new(targetPos.X, targetPos.Y + 100, targetPos.Z)
        hrp.CFrame = CFrame.new(skyPos)
        task.wait(0.5)
        hrp.CFrame = CFrame.new(targetPos)
    else
        currentTween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(targetPos)})
        currentTween:Play()
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
        currentTween.Completed:Wait()
    end
end

local function walkToBase()
    while tweenActive do
        if not updateCharacter() then
            task.wait(1)
            continue
        end
        
        local target = getBasePosition()
        if not target then
            Luna:Notification({Title = "Error", Content = "Base Not Found"})
            break
        end

        if isAtBase(target) then
            Luna:Notification({Title = "Success", Content = "Reached Base"})
            tweenActive = false
            break
        end

        local path = PathfindingService:CreatePath()
        local success, err = pcall(function()
            path:ComputeAsync(hrp.Position, target)
        end)

        if success and path.Status == Enum.PathStatus.Success then
            local waypoints = path:GetWaypoints()
            for _, waypoint in ipairs(waypoints) do
                if not tweenActive then return end
                if isAtBase(target) then
                    tweenActive = false
                    return
                end
                tweenWalkTo(waypoint.Position)
            end
        else
            tweenWalkTo(target)
        end

        task.wait(1.5)
    end
end

-- Dodge System with Tween
local dodgeEnabled = false
local dodgeSpeed = 3
local dodgeConnection

local function startDodge()
    if dodgeConnection then dodgeConnection:Disconnect() end
    
    dodgeConnection = RunService.Heartbeat:Connect(function()
        if not dodgeEnabled or not updateCharacter() then 
            if dodgeConnection then dodgeConnection:Disconnect() end
            return 
        end
        
        local myPos = hrp.Position
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local targetChar = player.Character
                local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
                if targetRoot then
                    local distance = (targetRoot.Position - myPos).Magnitude
                    if distance < 15 then
                        local direction = (myPos - targetRoot.Position).Unit
                        local dodgePosition = myPos + (direction * (10 * dodgeSpeed))
                        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad)
                        local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(dodgePosition)})
                        tween:Play()
                        task.wait(0.5)
                    end
                end
            end
        end
    end)
end

local function stopDodge()
    if dodgeConnection then 
        dodgeConnection:Disconnect() 
        dodgeConnection = nil
    end
end

-- X-Ray System
local xRayEnabled = false
local originalTransparencies = {}
local xRayTransparency = 0.5

local function enableXRay()
    if xRayEnabled then return end
    
    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Transparency < 0.5 then
            originalTransparencies[part] = part.Transparency
            part.Transparency = xRayTransparency
        end
    end
    xRayEnabled = true
end

local function disableXRay()
    if not xRayEnabled then return end
    
    for part, transparency in pairs(originalTransparencies) do
        if part and part.Parent then
            part.Transparency = transparency
        end
    end
    originalTransparencies = {}
    xRayEnabled = false
end

-- Character Size System
local sizeEnabled = false
local characterSize = 1

local function setCharacterSize(size)
    if not character then return end
    
    characterSize = size
    if humanoid then
        humanoid.BodyDepthScale.Value = size
        humanoid.BodyHeightScale.Value = size
        humanoid.BodyWidthScale.Value = size
        humanoid.HeadScale.Value = size
    end
end

-- Platform Part System
local platformEnabled = false
local platformPart = nil
local platformSpeed = 10
local platformConnection

local function createPlatform()
    if platformPart then platformPart:Destroy() end
    
    platformPart = Instance.new("Part")
    platformPart.Name = "PlayerPlatform"
    platformPart.Size = Vector3.new(4, 1, 4)
    platformPart.Anchored = true
    platformPart.CanCollide = true
    platformPart.Transparency = 0.5
    platformPart.BrickColor = BrickColor.new("Bright blue")
    platformPart.Material = Enum.Material.Neon
    
    if hrp then
        local bodyPosition = Instance.new("BodyPosition")
        bodyPosition.Parent = platformPart
        bodyPosition.MaxForce = Vector3.new(40000, 40000, 40000)
    end
    
    platformPart.Parent = Workspace
    
    if platformConnection then platformConnection:Disconnect() end
    platformConnection = RunService.Heartbeat:Connect(function()
        if not platformEnabled or not platformPart or not hrp then return end
        
        local currentPos = hrp.Position
        platformPart.Position = Vector3.new(currentPos.X, currentPos.Y - 3, currentPos.Z)
    end)
    
    return platformPart
end

local function removePlatform()
    if platformConnection then 
        platformConnection:Disconnect() 
        platformConnection = nil
    end
    if platformPart then
        platformPart:Destroy()
        platformPart = nil
    end
end

-- Gravity System
local gravityEnabled = false
local gravityValue = 196.2
local gravityConnection

local function applyGravity()
    if gravityConnection then gravityConnection:Disconnect() end
    
    gravityConnection = RunService.Heartbeat:Connect(function()
        if not gravityEnabled or not Workspace then return end
        Workspace.Gravity = gravityValue
    end)
end

local function resetGravity()
    if gravityConnection then 
        gravityConnection:Disconnect() 
        gravityConnection = nil
    end
    if Workspace then
        Workspace.Gravity = 196.2
    end
end

-- Player Management
local blockedPlayers = {}
local blockAllPlayers = false
local selectedPlayers = {}

local function blockPlayer(player)
    blockedPlayers[player.Name] = true
    Luna:Notification({Title = "Player Blocked", Content = "Blocked: " .. player.Name})
end

local function unblockPlayer(player)
    blockedPlayers[player.Name] = nil
    Luna:Notification({Title = "Player Unblocked", Content = "Unblocked: " .. player.Name})
end

local function blockAll()
    blockAllPlayers = true
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            blockedPlayers[player.Name] = true
        end
    end
    Luna:Notification({Title = "All Players Blocked", Content = "Blocked all players"})
end

local function unblockAll()
    blockAllPlayers = false
    blockedPlayers = {}
    Luna:Notification({Title = "All Players Unblocked", Content = "Unblocked all players"})
end

-- Server Management
local function rejoinServer()
    TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId)
end

local function serverHop()
    local servers = {}
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
    end)
    
    if success and result and result.data then
        for _, server in ipairs(result.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                table.insert(servers, server)
            end
        end
        
        if #servers > 0 then
            local randomServer = servers[math.random(1, #servers)]
            TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer.id)
        end
    end
end

local function copyJobID()
    setclipboard(tostring(game.JobId))
    Luna:Notification({Title = "Server", Content = "Job ID copied to clipboard"})
end

local function joinByJobID(jobID)
    if jobID and jobID ~= "" then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, jobID)
    end
end

-- Server Crasher Methods
local serverCrashMethods = {
    "Method 1 (Tool Spam)",
    "Method 2 (Part Spam)", 
    "Method 3 (Remote Spam)",
    "Method 4 (Sound Spam)",
    "Method 5 (Character Spam)"
}

local selectedCrashMethod = "Method 1 (Tool Spam)"

local function serverCrashMethod1()
    -- Method 1: Tool spam
    for i = 1, 100 do
        pcall(function()
            local tool = Instance.new("Tool")
            tool.Name = "CrashTool" .. i
            tool.Parent = LocalPlayer.Backpack
        end)
        task.wait()
    end
end

local function serverCrashMethod2()
    -- Method 2: Part spam
    for i = 1, 50 do
        pcall(function()
            local part = Instance.new("Part")
            part.Name = "CrashPart" .. i
            part.Size = Vector3.new(100, 100, 100)
            part.Position = Vector3.new(0, 100, 0)
            part.Parent = Workspace
        end)
        task.wait()
    end
end

local function serverCrashMethod3()
    -- Method 3: Remote spam
    for i = 1, 200 do
        pcall(function()
            local remote = ReplicatedStorage:FindFirstChild("Packages")
            if remote then
                remote:FindFirstChild("Net"):FindFirstChild("RE/UseItem"):FireServer()
            end
        end)
        task.wait()
    end
end

local function serverCrashMethod4()
    -- Method 4: Sound spam
    for i = 1, 30 do
        pcall(function()
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://9111278252"
            sound.Volume = 10
            sound.Parent = Workspace
            sound:Play()
        end)
        task.wait()
    end
end

local function serverCrashMethod5()
    -- Method 5: Character spam
    for i = 1, 20 do
        pcall(function()
            local char = Instance.new("Model")
            char.Name = "CrashChar" .. i
            local part = Instance.new("Part")
            part.Name = "Head"
            part.Parent = char
            char.Parent = Workspace
        end)
        task.wait()
    end
end

-- Input handling for flight
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E then
        flyUp = true
    elseif input.KeyCode == Enum.KeyCode.Q then
        flyDown = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.E then
        flyUp = false
    elseif input.KeyCode == Enum.KeyCode.Q then
        flyDown = false
    end
end)

-- Main Tab Content
MainTab:CreateSection("Shop System")

local shopItems = {
	"Coil Combo", "Rage Table", "Diamond Slap", "Grapple Gun", "Taser",
	"Emerald Slap", "Invisibility Cloak", "Boogie Bomb", "Trap", "Medusa's Head",
	"Dark Matter Slap", "Web Slinger", "Flame Slap", "Quantum Cloner", "Gold Slap",
	"Iron Slap", "Basic Slap", "Bee Launcher", "Laser Cape", "Speed Coil",
	"Gravity Coil", "Rainbowrath Sword", "Glitched Slap", "Body Swap Potion",
	"Splatter Slap", "Paintball Gun", "All Seeing Sentry", "Nuclear Slap",
	"Galaxy Slap", "Ruby Slap"
}

local selectedItems = {}

local ItemSelection = MainTab:CreateDropdown({
	Name = "Select Items to Buy",
	Description = "Choose which items to purchase",
	Options = shopItems,
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		selectedItems = Options
	end
})

MainTab:CreateButton({
	Name = "Buy Selected Items",
	Description = "Purchase only selected items",
	Callback = function()
		local purchased = 0
		for _, itemName in pairs(selectedItems) do
			local success = pcall(function() 
				local RequestBuy = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RF/CoinsShopService/RequestBuy")
				RequestBuy:InvokeServer(itemName) 
			end)
			if success then 
				purchased = purchased + 1 
			end
			task.wait(0.1)
		end
		Luna:Notification({Title = "Purchase Complete", Content = "Successfully purchased " .. purchased .. " selected items"})
	end
})

MainTab:CreateButton({
	Name = "Buy All Items",
	Description = "Purchase all available items",
	Callback = function()
		local purchased = 0
		for _, itemName in pairs(shopItems) do
			local success = pcall(function() 
				local RequestBuy = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RF/CoinsShopService/RequestBuy")
				RequestBuy:InvokeServer(itemName) 
			end)
			if success then 
				purchased = purchased + 1 
			end
			task.wait(0.1)
		end
		Luna:Notification({Title = "Purchase Complete", Content = "Successfully purchased " .. purchased .. " items"})
	end
})

MainTab:CreateSection("Location Teleport")

local locations = {
	["Fuse Machine"] = Vector3.new(-378.6759948730469, -4.063000202178955, 76.913818359375),
	["Shop"] = Vector3.new(-378.751953125, -5.000003814697266, 53.40647888183594),
	["Robux Shop"] = Vector3.new(-442.751953125, -5.000003814697266, 53.406463623046875),
	["Steal Board"] = Vector3.new(-377.751953125, 4.749996185302734, 259.406494140625)
}

local teleportMethod = "Tween"
local currentLocation = "Fuse Machine"

local LocationDropdown = MainTab:CreateDropdown({
	Name = "Select Destination",
	Description = "Choose where to teleport",
	Options = {"Fuse Machine", "Shop", "Robux Shop", "Steal Board"},
	CurrentOption = {"Fuse Machine"},
	MultipleOptions = false,
	Callback = function(Options)
		if #Options > 0 then
			currentLocation = Options[1]
		end
	end
})

local MethodDropdown = MainTab:CreateDropdown({
	Name = "Travel Method",
	Description = "Choose how to reach destination",
	Options = {"Tween", "Walk"},
	CurrentOption = {"Tween"},
	MultipleOptions = false,
	Callback = function(Options)
		if #Options > 0 then
			teleportMethod = Options[1]
		end
	end
})

local function teleportToLocation()
	local targetPos = locations[currentLocation]
	if not targetPos then return end
	
	if not updateCharacter() then 
		Luna:Notification({Title = "Error", Content = "Character not found"})
		return 
	end
	
	Luna:Notification({Title = "Teleporting", Content = "Traveling to " .. currentLocation})
	
	if teleportMethod == "Tween" then
		local tweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Linear)
		local targetCFrame = CFrame.new(targetPos)
		
		for _, part in pairs(character:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = false
			end
		end
		
		local tween = TweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})
		tween:Play()
		
		tween.Completed:Connect(function()
			for _, part in pairs(character:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CanCollide = true
				end
			end
			Luna:Notification({Title = "Arrived", Content = "Successfully teleported to " .. currentLocation})
		end)
		
	else
		local path = PathfindingService:CreatePath({
			AgentRadius = 2,
			AgentHeight = 5,
			AgentCanJump = true
		})
		
		local success, err = pcall(function()
			path:ComputeAsync(hrp.Position, targetPos)
		end)
		
		if success and path.Status == Enum.PathStatus.Success then
			local waypoints = path:GetWaypoints()
			for i, waypoint in ipairs(waypoints) do
				if not updateCharacter() then break end
				
				if waypoint.Action == Enum.PathWaypointAction.Jump then
					humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
				
				humanoid:MoveTo(waypoint.Position)
				task.wait(0.5)
			end
			Luna:Notification({Title = "Arrived", Content = "Successfully walked to " .. currentLocation})
		else
			Luna:Notification({Title = "Error", Content = "Could not find path to destination"})
		end
	end
end

MainTab:CreateButton({
	Name = "Go to Selected Location",
	Description = "Travel to chosen destination",
	Callback = teleportToLocation
})

MainTab:CreateSection("Combat & ESP")

local ESPBestToggle = MainTab:CreateToggle({
	Name = "ESP Best Pet",
	Description = "Show best pet in bases",
	CurrentValue = false,
	Callback = function(Value)
		espConfig.enabledBest = Value
		if Value then
			pcall(updateBestSecret)
			Luna:Notification({Title = "ESP", Content = "Best Pet ESP activated"})
		else
			clearAllBestSecret()
			Luna:Notification({Title = "ESP", Content = "Best Pet ESP deactivated"})
		end
	end
})

local ESPSecretToggle = MainTab:CreateToggle({
	Name = "ESP Secret Pet",
	Description = "Show secret pets in bases",
	CurrentValue = false,
	Callback = function(Value)
		espConfig.enabledSecret = Value
		if Value then
			pcall(updateBestSecret)
			Luna:Notification({Title = "ESP", Content = "Secret Pet ESP activated"})
		else
			clearAllBestSecret()
			Luna:Notification({Title = "ESP", Content = "Secret Pet ESP deactivated"})
		end
	end
})

local ESPPlayerToggle = MainTab:CreateToggle({
	Name = "ESP Player",
	Description = "Show players with boxes",
	CurrentValue = false,
	Callback = function(Value)
		espConfig.enabledPlayer = Value
		if Value then
			pcall(updatePlayerESP)
			Luna:Notification({Title = "ESP", Content = "Player ESP activated"})
		else
			clearPlayerESP()
			Luna:Notification({Title = "ESP", Content = "Player ESP deactivated"})
		end
	end
})

local ESPTracersToggle = MainTab:CreateToggle({
	Name = "ESP Tracers",
	Description = "Show lines to players",
	CurrentValue = false,
	Callback = function(Value)
		espConfig.enabledTracers = Value
		if Value then
			pcall(updateTracers)
			Luna:Notification({Title = "ESP", Content = "Player Tracers activated"})
		else
			clearPlayerESP()
			Luna:Notification({Title = "ESP", Content = "Player Tracers deactivated"})
		end
	end
})

local TracerThicknessSlider = MainTab:CreateSlider({
	Name = "Tracer Thickness",
	Range = {1, 5},
	Increment = 1,
	CurrentValue = 1,
	Callback = function(Value)
		espConfig.tracerThickness = Value
	end
})

local AimbotToggle = MainTab:CreateToggle({
	Name = "Auto Aimbot",
	Description = "Automatically aim at players",
	CurrentValue = false,
	Callback = function(Value)
		if Value then
			startAutoAimbot()
			Luna:Notification({Title = "Aimbot", Content = "Auto aimbot activated"})
		else
			stopAutoAimbot()
			Luna:Notification({Title = "Aimbot", Content = "Auto aimbot deactivated"})
		end
	end
})

local AimbotRangeSlider = MainTab:CreateSlider({
	Name = "Aimbot Range",
	Range = {50, 300},
	Increment = 10,
	CurrentValue = 100,
	Callback = function(Value)
		aimbotRange = Value
	end
})

local AimbotIntervalSlider = MainTab:CreateSlider({
	Name = "Aimbot Interval",
	Range = {0.1, 1},
	Increment = 0.1,
	CurrentValue = 1,
	Callback = function(Value)
		aimbotInterval = Value
	end
})

-- Local Player Tab Content
LocalPlayerTab:CreateSection("Movement Systems")

local SpeedToggle = LocalPlayerTab:CreateToggle({
	Name = "Speed Hack",
	Description = "Enable speed hack system",
	CurrentValue = false,
	Callback = function(Value)
		speedEnabled = Value
		if Value then
			Luna:Notification({Title = "Speed Hack", Content = "Speed hack activated"})
			startSpeedHack()
			buyGrapple()
			startFakeFireLoop()
		else
			Luna:Notification({Title = "Speed Hack", Content = "Speed hack deactivated"})
			stopSpeedHack()
		end
	end
})

local SpeedSlider = LocalPlayerTab:CreateSlider({
	Name = "Speed Value",
	Range = {40, 250},
	Increment = 10,
	CurrentValue = 150,
	Callback = function(Value)
		currentSpeed = Value
	end
})

local SwimToggle = LocalPlayerTab:CreateToggle({
	Name = "Swim Hack",
	Description = "Swim anywhere",
	CurrentValue = false,
	Callback = function(Value)
		swimEnabled = Value
		if Value then
			Luna:Notification({Title = "Swim Hack", Content = "Swim anywhere activated"})
			startSwimming()
		else
			Luna:Notification({Title = "Swim Hack", Content = "Swim anywhere deactivated"})
			stopSwimming()
		end
	end
})

local SwimSlider = LocalPlayerTab:CreateSlider({
	Name = "Swim Speed",
	Range = {10, 35},
	Increment = 5,
	CurrentValue = 13,
	Callback = function(Value)
		swimSpeed = Value
	end
})

LocalPlayerTab:CreateSection("Flight Systems")

local FlyToggle = LocalPlayerTab:CreateToggle({
	Name = "Fly",
	Description = "Enable flying mode",
	CurrentValue = false,
	Callback = function(Value)
		flyEnabled = Value
		if Value then
			Luna:Notification({Title = "Flight", Content = "Fly activated"})
			startFlying()
		else
			Luna:Notification({Title = "Flight", Content = "Fly deactivated"})
			stopFlying()
		end
	end
})

local FlySlider = LocalPlayerTab:CreateSlider({
	Name = "Fly Speed",
	Range = {10, 250},
	Increment = 10,
	CurrentValue = 50,
	Callback = function(Value)
		flySpeed = Value
	end
})

LocalPlayerTab:CreateSection("Character Actions")

local GravityToggle = LocalPlayerTab:CreateToggle({
	Name = "Gravity Changer",
	Description = "Change workspace gravity",
	CurrentValue = false,
	Callback = function(Value)
		gravityEnabled = Value
		if Value then
			applyGravity()
			Luna:Notification({Title = "Gravity", Content = "Gravity changer activated"})
		else
			resetGravity()
			Luna:Notification({Title = "Gravity", Content = "Gravity reset to normal"})
		end
	end
})

local GravitySlider = LocalPlayerTab:CreateSlider({
	Name = "Gravity Value",
	Range = {0, 500},
	Increment = 10,
	CurrentValue = 196,
	Callback = function(Value)
		gravityValue = Value
	end
})

local PlatformToggle = LocalPlayerTab:CreateToggle({
	Name = "Platform Part",
	Description = "Create platform under feet with speed",
	CurrentValue = false,
	Callback = function(Value)
		platformEnabled = Value
		if Value then
			createPlatform()
			Luna:Notification({Title = "Platform", Content = "Platform created with speed"})
		else
			removePlatform()
			Luna:Notification({Title = "Platform", Content = "Platform removed"})
		end
	end
})

local PlatformSpeedSlider = LocalPlayerTab:CreateSlider({
	Name = "Platform Speed",
	Range = {1, 20},
	Increment = 1,
	CurrentValue = 10,
	Callback = function(Value)
		platformSpeed = Value
	end
})

-- Stealer Tab Content
StealerTab:CreateSection("Protection Systems")

local DodgeToggle = StealerTab:CreateToggle({
	Name = "Auto Dodge Move",
	Description = "Automatically dodge when players are near",
	CurrentValue = false,
	Callback = function(Value)
		dodgeEnabled = Value
		if Value then
			Luna:Notification({Title = "Dodge System", Content = "Auto dodge activated"})
			startDodge()
		else
			Luna:Notification({Title = "Dodge System", Content = "Auto dodge deactivated"})
			stopDodge()
		end
	end
})

local DodgeSlider = StealerTab:CreateSlider({
	Name = "Dodge Speed",
	Range = {1, 3},
	Increment = 0.5,
	CurrentValue = 3,
	Callback = function(Value)
		dodgeSpeed = Value
	end
})

local BaseProtectionToggle = StealerTab:CreateToggle({
	Name = "Base Protection",
	Description = "Future updates will protect using Laser Cape",
	CurrentValue = false,
	Callback = function(Value)
		if Value then
			Luna:Notification({Title = "Base Protection", Content = "In future updates, this will protect your base using Laser Cape"})
		else
			Luna:Notification({Title = "Base Protection", Content = "Base protection deactivated"})
		end
	end
})

StealerTab:CreateSection("Desync System")

local DesyncTypeDropdown = StealerTab:CreateDropdown({
	Name = "Desync Type",
	Description = "Choose desync method",
	Options = {"Quantum Cloner", "Delayed Character"},
	CurrentOption = {"Quantum Cloner"},
	MultipleOptions = false,
	Callback = function(Options)
		if #Options > 0 then
			selectedDesyncType = Options[1]
		end
	end
})

local DesyncDelaySlider = StealerTab:CreateSlider({
	Name = "Desync Delay",
	Range = {1, 10},
	Increment = 1,
	CurrentValue = 5,
	Callback = function(Value)
		desyncDelay = Value
	end
})

local DesyncToggle = StealerTab:CreateToggle({
	Name = "Activate Desync",
	Description = "Enable selected desync protection",
	CurrentValue = false,
	Callback = function(Value)
		if Value then
			if selectedDesyncType == "Quantum Cloner" then
				executeAntiHit()
				Luna:Notification({Title = "Quantum Desync", Content = "Quantum desync activated"})
			else
				Luna:Notification({Title = "Delayed Desync", Content = "Delayed character desync activated with " .. desyncDelay .. "s delay"})
			end
		else
			if selectedDesyncType == "Quantum Cloner" then
				deactivateAntiHit()
				Luna:Notification({Title = "Quantum Desync", Content = "Quantum desync deactivated"})
			else
				Luna:Notification({Title = "Delayed Desync", Content = "Delayed character desync deactivated"})
			end
		end
	end
})

StealerTab:CreateSection("Base Navigation")

local TweenMethodDropdown = StealerTab:CreateDropdown({
	Name = "Tween Method",
	Description = "Choose how to tween to base",
	Options = {"Normal", "Swim", "Teleport to Sky"},
	CurrentOption = {"Normal"},
	MultipleOptions = false,
	Callback = function(Options)
		if #Options > 0 then
			tweenMethod = Options[1]
		end
	end
})

local TweenSpeedSlider = StealerTab:CreateSlider({
	Name = "Tween Speed",
	Range = {5, 18},
	Increment = 1,
	CurrentValue = 18,
	Callback = function(Value)
		tweenSpeed = Value
	end
})

local TweenBaseToggle = StealerTab:CreateToggle({
	Name = "Smart Tween to Base",
	Description = "Automatically tween to your base",
	CurrentValue = false,
	Callback = function(Value)
		tweenActive = Value
		if Value then
			humanoid.WalkSpeed = 24
			Luna:Notification({Title = "Smart Tween", Content = "Smart tween to base started"})
			walkThread = task.spawn(walkToBase)
		else
			if currentTween then currentTween:Cancel() end
			if walkThread then task.cancel(walkThread) end
			humanoid.WalkSpeed = 16
			Luna:Notification({Title = "Smart Tween", Content = "Tween stopped"})
		end
	end
})

-- Misc Tab Content
MiscTab:CreateSection("Player Management")

local playerList = {}
for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        table.insert(playerList, player.Name)
    end
end

local PlayerSelection = MiscTab:CreateDropdown({
	Name = "Select Players",
	Description = "Choose players to manage",
	Options = playerList,
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		selectedPlayers = Options
	end
})

MiscTab:CreateButton({
	Name = "Block Selected Players",
	Description = "Block the selected players",
	Callback = function()
		for _, playerName in pairs(selectedPlayers) do
			local player = Players:FindFirstChild(playerName)
			if player then
				blockPlayer(player)
			end
		end
	end
})

MiscTab:CreateButton({
	Name = "Block All Players",
	Description = "Block all players in the server",
	Callback = function()
		blockAll()
	end
})

MiscTab:CreateButton({
	Name = "Unblock All Players",
	Description = "Unblock all players",
	Callback = function()
		unblockAll()
	end
})

MiscTab:CreateSection("Utilities")

local CharacterSizeToggle = MiscTab:CreateToggle({
	Name = "Tall Character",
	Description = "Make your character taller (FE)",
	CurrentValue = false,
	Callback = function(Value)
		sizeEnabled = Value
		if Value then
			setCharacterSize(characterSize)
			Luna:Notification({Title = "Size", Content = "Character size changer activated"})
		else
			setCharacterSize(1)
			Luna:Notification({Title = "Size", Content = "Character size reset to normal"})
		end
	end
})

local CharacterSizeSlider = MiscTab:CreateSlider({
	Name = "Character Size",
	Range = {0.1, 5},
	Increment = 0.1,
	CurrentValue = 1,
	Callback = function(Value)
		characterSize = Value
		if sizeEnabled then
			setCharacterSize(Value)
		end
	end
})

local XRayToggle = MiscTab:CreateToggle({
	Name = "X-Ray Vision",
	Description = "See through walls and objects",
	CurrentValue = false,
	Callback = function(Value)
		if Value then
			enableXRay()
			Luna:Notification({Title = "X-Ray", Content = "X-Ray vision activated"})
		else
			disableXRay()
			Luna:Notification({Title = "X-Ray", Content = "X-Ray vision deactivated"})
		end
	end
})

local XRayTransparencySlider = MiscTab:CreateSlider({
	Name = "X-Ray Transparency",
	Range = {0.1, 0.9},
	Increment = 0.1,
	CurrentValue = 0.5,
	Callback = function(Value)
		xRayTransparency = Value
		if xRayEnabled then
			disableXRay()
			enableXRay()
		end
	end
})

MiscTab:CreateButton({
	Name = "Full Bright",
	Description = "Make everything bright",
	Callback = function()
		game:GetService("Lighting").Brightness = 2
		game:GetService("Lighting").ClockTime = 14
		Luna:Notification({Title = "Visual", Content = "Full bright activated"})
	end
})

MiscTab:CreateButton({
	Name = "Remove Fog",
	Description = "Remove all fog effects",
	Callback = function()
		game:GetService("Lighting").FogEnd = 100000
		Luna:Notification({Title = "Visual", Content = "Fog removed"})
	end
})

MiscTab:CreateButton({
	Name = "Reset Lighting",
	Description = "Reset lighting to default",
	Callback = function()
		game:GetService("Lighting").Brightness = 1
		game:GetService("Lighting").FogEnd = 100000
		Luna:Notification({Title = "Visual", Content = "Lighting reset"})
	end
})

-- Server Tab Content
ServerTab:CreateSection("Server Management")

ServerTab:CreateButton({
	Name = "Rejoin Server",
	Description = "Rejoin current server",
	Callback = function()
		rejoinServer()
	end
})

ServerTab:CreateButton({
	Name = "Server Hop",
	Description = "Join a different server",
	Callback = function()
		serverHop()
	end
})

ServerTab:CreateButton({
	Name = "Copy Job ID",
	Description = "Copy current server Job ID",
	Callback = function()
		copyJobID()
	end
})

local JobIDInput = ServerTab:CreateInput({
	Name = "Join by Job ID",
	Description = "Enter Job ID to join specific server",
	Callback = function(Value)
		joinByJobID(Value)
	end
})

ServerTab:CreateSection("Server Crasher")

local CrashMethodDropdown = ServerTab:CreateDropdown({
	Name = "Crash Method",
	Description = "Select crash method",
	Options = serverCrashMethods,
	CurrentOption = {"Method 1 (Tool Spam)"},
	MultipleOptions = false,
	Callback = function(Options)
		if #Options > 0 then
			selectedCrashMethod = Options[1]
		end
	end
})

ServerTab:CreateButton({
	Name = "Execute Server Crash",
	Description = "Crash the server using selected method",
	Callback = function()
		Luna:Notification({Title = "Server Crash", Content = "Executing: " .. selectedCrashMethod})
		
		if selectedCrashMethod == "Method 1 (Tool Spam)" then
			serverCrashMethod1()
		elseif selectedCrashMethod == "Method 2 (Part Spam)" then
			serverCrashMethod2()
		elseif selectedCrashMethod == "Method 3 (Remote Spam)" then
			serverCrashMethod3()
		elseif selectedCrashMethod == "Method 4 (Sound Spam)" then
			serverCrashMethod4()
		elseif selectedCrashMethod == "Method 5 (Character Spam)" then
			serverCrashMethod5()
		end
	end
})

-- Settings Tab Content
SettingsTab:CreateSection("Key Binds")

local KeyBindFly = SettingsTab:CreateKeybind({
	Name = "Fly Toggle",
	CurrentKeybind = "F",
	Callback = function(Key)
		flyEnabled = not flyEnabled
		if flyEnabled then
			startFlying()
		else
			stopFlying()
		end
		Luna:Notification({Title = "Fly", Content = flyEnabled and "Enabled" or "Disabled"})
	end
})

local KeyBindSpeed = SettingsTab:CreateKeybind({
	Name = "Speed Toggle",
	CurrentKeybind = "V",
	Callback = function(Key)
		speedEnabled = not speedEnabled
		if speedEnabled then
			startSpeedHack()
			buyGrapple()
			startFakeFireLoop()
		else
			stopSpeedHack()
		end
		Luna:Notification({Title = "Speed", Content = speedEnabled and "Enabled" or "Disabled"})
	end
})

local KeyBindSwim = SettingsTab:CreateKeybind({
	Name = "Swim Toggle",
	CurrentKeybind = "G",
	Callback = function(Key)
		swimEnabled = not swimEnabled
		if swimEnabled then
			startSwimming()
		else
			stopSwimming()
		end
		Luna:Notification({Title = "Swim", Content = swimEnabled and "Enabled" or "Disabled"})
	end
})

local KeyBindAimbot = SettingsTab:CreateKeybind({
	Name = "Aimbot Toggle",
	CurrentKeybind = "R",
	Callback = function(Key)
		autoAimbot = not autoAimbot
		if autoAimbot then
			startAutoAimbot()
		else
			stopAutoAimbot()
		end
		Luna:Notification({Title = "Aimbot", Content = autoAimbot and "Enabled" or "Disabled"})
	end
})

local KeyBindESP = SettingsTab:CreateKeybind({
	Name = "ESP Toggle",
	CurrentKeybind = "X",
	Callback = function(Key)
		espConfig.enabledPlayer = not espConfig.enabledPlayer
		if espConfig.enabledPlayer then
			pcall(updatePlayerESP)
		else
			clearPlayerESP()
		end
		Luna:Notification({Title = "ESP", Content = espConfig.enabledPlayer and "Enabled" or "Disabled"})
	end
})

local KeyBindDesync = SettingsTab:CreateKeybind({
	Name = "Desync Toggle",
	CurrentKeybind = "Z",
	Callback = function(Key)
		if antiHitActive then
			deactivateAntiHit()
			Luna:Notification({Title = "Desync", Content = "Deactivated"})
		else
			executeAntiHit()
			Luna:Notification({Title = "Desync", Content = "Activated"})
		end
	end
})

SettingsTab:CreateSection("Configuration")

local AutoLoadToggle = SettingsTab:CreateToggle({
	Name = "Auto Load Script",
	Description = "Automatically load script on game start",
	CurrentValue = true,
	Callback = function(Value)
		Luna:Notification({Title = "Auto Load", Content = Value and "Enabled" or "Disabled"})
	end
})

SettingsTab:CreateButton({
	Name = "Save Configuration",
	Description = "Save current settings",
	Callback = function()
		Luna:Notification({Title = "Settings", Content = "Configuration saved"})
	end
})

SettingsTab:CreateButton({
	Name = "Load Configuration",
	Description = "Load saved settings",
	Callback = function()
		Luna:Notification({Title = "Settings", Content = "Configuration loaded"})
	end
})

SettingsTab:CreateButton({
	Name = "Reset All Settings",
	Description = "Reset to default settings",
	Callback = function()
		Luna:Notification({Title = "Settings", Content = "All settings reset"})
	end
})

-- Character respawn handling
LocalPlayer.CharacterAdded:Connect(function(c)
    character = c
    task.wait(1)
    hrp = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    
    if speedEnabled then 
        startSpeedHack()
        startFakeFireLoop()
    end
    if flyEnabled then startFlying() end
    if swimEnabled then startSwimming() end
    if dodgeEnabled then startDodge() end
    if xRayEnabled then enableXRay() end
    if sizeEnabled then setCharacterSize(characterSize) end
    if autoAimbot then startAutoAimbot() end
    if gravityEnabled then applyGravity() end
    if platformEnabled then createPlatform() end
end)

-- ESP update loop
task.spawn(function()
	while true do
		task.wait(1.5)
		if espConfig.enabledBest or espConfig.enabledSecret then
			pcall(updateBestSecret)
		end
		if espConfig.enabledPlayer then
			pcall(updatePlayerESP)
		end
		if espConfig.enabledTracers then
			pcall(updateTracers)
		end
	end
end)

Luna:Notification({
	Title = "ScriptVerseHub Loaded",
	Content = "All systems ready! Join our Discord: https://discord.gg/xnn77nMGMv"
}) 
